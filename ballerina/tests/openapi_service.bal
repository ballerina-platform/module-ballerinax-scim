// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

listener http:Listener ep0 = new (443, config = {host: "localhost"});

service /t/scim2 on ep0 {
    resource function delete Groups/[string id]() returns http:NoContent|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorNoGroupAvailableNotFound {
        return http:NO_CONTENT;
    }

    resource function delete Users/[string id]() returns http:NoContent|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorUserNotAvailableNotFound {
        return http:NO_CONTENT;
    }

    resource function get Groups(string? attributes, string? excludedAttributes, string? filter, int:Signed32? startIndex, int:Signed32? count, string? domain) returns GroupsListResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden {
        GroupsListResponseObject response = {
            totalResults: 0,
            startIndex: startIndex,
            itemsPerPage: count,
            schemas: [],
            Resources: []
        };
        return response;
    }

    resource function get Groups/[string id](string? attributes, string? excludedAttributes) returns GroupResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorNoGroupAvailableNotFound {
        GroupResponseObject response = {
            id: id,
            displayName: "DEFAULT/TestGroup",
            members: []
        };
        return response;
    }

    resource function get ResourceTypes() returns ResourceTypeResponse|ErrorUnauthorizedUnauthorized|ErrorSchemaNotFoundNotFound {
        ResourceTypeResponse response = {
            schemas: []
        };
        return response;
    }

    resource function get ServiceProviderConfig() returns SPConfigResponse|ErrorUnauthorizedUnauthorized|ErrorSchemaNotFoundNotFound {
        SPConfigResponse response = {
        };
        return response;
    }

    resource function get Users(string? attributes, string? excludedAttributes, string? filter, int:Signed32? startIndex, int:Signed32? count, string? domain) returns UserObjectListResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden {
        UserObjectListResponseObject response = {
            totalResults: 0,
            startIndex: startIndex,
            itemsPerPage: count,
            schemas: [],
            Resources: []
        };
        return response;
    }

    resource function get Users/[string id](string? attributes, string? excludedAttributes) returns UserResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorUserNotAvailableNotFound {
        UserResponseObject response = {
            id: id,
            "displayName": "Kim",
            emails: [],
            name: {
                givenName: "Kim",
                familyName: id
            }
            ,
            meta: {}
        };
        return response;
    }

    resource function patch Groups/[string id](string? attributes, string? excludedAttributes, @http:Payload PatchGroupOperationRequestObject payload) returns PatchGroupOperationResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorNoGroupAvailableNotFound {
        PatchGroupOperationResponseObject response = {
            id: id,
            "displayName": "DEFAULT/PatchedTestGroup",
            "meta": {}
        };
        return response;
    }

    resource function patch Users/[string id](string? attributes, string? excludedAttributes, @http:Payload PatchOperationInput payload) returns UserResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorUserNotAvailableNotFound {
        UserResponseObject response = {
            id: id,
            "displayName": "user" + id,
            emails: [],
            name: {
                givenName: "Kimberly3",
                familyName: id
            },
            meta: {}
        };
        return response;
    }

    resource function post Bulk(@http:Payload Bulk_body payload) returns BulkUserResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|http:Conflict {
        BulkUserResponseObject response = {
            "meta": {},
            Operations: [
                {
                    bulkId: "123445"
                }
            ]
        };
        return response;
    }

    resource function post Groups(string? attributes, string? excludedAttributes, @http:Payload GroupRequestObject payload) returns GroupResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorGroupNotAvailableNotFound|ErrorGroupAlreadyAvailableConflict {
        GroupResponseObject response = {
            id: "group1",
            "displayName": "Group 1",
            "meta": {}
        };
        return response;
    }

    resource function post Groups/\.search(@http:Payload GroupSearchRequestObject payload) returns GroupSearchResponseObjectOk|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden {
        GroupSearchResponseObjectOk response = {
            body: {
            }
        };
        return response;
    }

    resource function post Users(string? attributes, string? excludedAttributes, @http:Payload Users_body payload) returns UserResponseObject|ErrorInvalidInputBadRequest|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorInternalServerErrorInternalServerError {
        UserResponseObject response = {
            id: "user1",
            "displayName": "User 1",
            emails: [],
            name: {
                givenName: "User",
                familyName: "1"
            },
            meta: {}
        };
        return response;
    }

    resource function post Users/\.search(@http:Payload UserSearchRequestObject payload) returns UserObjectListResponseObjectOk|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden {
        UserObjectListResponseObjectOk response = {
            body: {
            }
        };
        return response;
    }

    resource function put Groups/[string id](string? attributes, string? excludedAttributes, @http:Payload GroupPutRequestObject payload) returns GroupPutResponseObject|ErrorInvalidInputBadRequest|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorNoGroupAvailableNotFound {
        GroupPutResponseObject response = {
            id: id,
            "displayName": "DEFAULT/UpdatedTestGroup",
            "meta": {}
        };
        return response;
    }

    resource function put Users/[string id](string? attributes, string? excludedAttributes, @http:Payload UserUpdateObject payload) returns UserResponseObject|ErrorUnauthorizedUnauthorized|ErrorForbiddenForbidden|ErrorUserNotAvailableNotFound {
        UserResponseObject response = {
            id: id,
            "displayName": "User " + id,
            emails: [],
            name: {
                givenName: "Kimberly",
                familyName: id
            },
            meta: {}
        };
        return response;
    }
}
