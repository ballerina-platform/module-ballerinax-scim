// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# Represents the Queries record for the operation: getGroup
public type GetGroupQueries record {
    # Filter expression for filtering
    string filter?;
    # The 1-based index of the first query result
    int:Signed32 startIndex?;
    # The name of the user store where filtering needs to be applied.
    string domain?;
    # Specifies the desired maximum number of query results per page.
    int:Signed32 count?;
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

# Specify the details of the new user that should be updated.
public type BulkUserUpdateOb_data record {
    # The operation that should be applied to the existing user data.
    string op;
    # The path to the resource (user attribute) that should be updated. (Optional if <b>op</b> is <b>add</b> or <b>replace</b>)
    string path;
    # The value of the parameter specified by the path. (Optional if <b>op</b> is <b>add</b> or <b>replace</b>)
    string value;
};

# OAuth2 Client Credentials Grant Configs
public type OAuth2ClientCredentialsGrantConfig record {|
    *http:OAuth2ClientCredentialsGrantConfig;
    # Token URL
    string tokenUrl = "";
|};

public type OperationObBulk_inner record {
    string bulkId?;
    string method?;
    string location?;
    record {int code?;} status?;
};

public type BulkUserDeleteOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify the existing user that should be deleted.
    string path;
};

public type UserSearchRequestObject record {
    string[] schemas;
    # SCIM defined attributes parameter.
    string[] attributes?;
    # The expression used for filtering. Supported filters are <code>ew</code>, <code>eq</code>, <code>co</code>, <code>sw</code>, and <code>and</code>.
    string filter?;
    # The name of the user store where filtering needs to be applied.
    string domain?;
    # The 1-based index of the first query result
    int:Signed32 startIndex?;
    # Specifies the desired maximum number of query results per page. </br>(For organizations created on or after November 19, 2024, a threshold value of 100 will be applied to the count parameter. To fetch more users, use pagination.)
    int:Signed32 count?;
};

public type SPConfigResponse record {
};

public type UserObjectPassInvite record {
    string[] schemas?;
    UserObject_name name?;
    # Unique username of the user.
    string userName?;
    # This email will be entered for the Email attribute in the user's profile.
    record {}[] emails?;
    Enterprise\ User\ Extension urn\:ietf\:params\:scim\:schemas\:extension\:enterprise\:2\.0\:User?;
    UserObjectPassInvite_urnscimwso2schema urn\:scim\:wso2\:schema?;
};

# Specify the details of the new user group that should be added.
public type BulkGroupCreateOb_data record {
    # The display name of the user group.
    string displayName;
    # An array of member users.
    BulkGroupCreateOb_data_members[] members?;
};

public type BulkGroupUpdateOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify the user group that should be updated.
    string path;
    # A unique identifier for the bulk operation. The bulkid is required for POST operations.
    int bulkId?;
    # Specify the details that should be updated for the user group specified in the path.
    BulkGroupUpdateOb_data data;
};

public type UserResponseObject record {
    UserResponseObject_meta meta;
    string[] schemas?;
    string username?;
    string id?;
    UserResponseObject_name name?;
    (string|record {})[] emails?;
    Enterprise\ User\ Extension urn\:ietf\:params\:scim\:schemas\:extension\:enterprise\:2\.0\:User?;
    UserResponseObject_roles[] roles?;
};

# Represents the Queries record for the operation: updateUser
public type UpdateUserQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type BulkGroupCreateOb_data_members record {
    # The display name of a user assigned to the group.(Required if <b>members</b> is used)
    string display?;
    # The ID of the user.(Required if <b>members</b> is used)
    string value?;
};

# Represents the Queries record for the operation: createGroup
public type CreateGroupQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

# Represents the Queries record for the operation: getUser by id
public type GetUserByIdQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type GroupRequestObject record {
    string[] schemas;
    string displayName;
    record {}[] members?;
};

public type groupOb_members record {
    string \$ref?;
    string display?;
    string value?;
};

public type BulkGroupDeleteObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To delete multiple user groups, add an array of PUT operations. You can include any number of operations in one bulk request.
    BulkGroupDeleteOb[] Operations;
};

public type GroupItemObj record {
    "add"|"remove"|"replace" op?;
    GroupItemObj_value value?;
};

public type UserResponseObject_roles record {
    string 'type?;
    string value?;
};

# Specify the new user details that should be used to replace the existing user specified in the path.
public type BulkUserReplaceOb_data record {
    # Specify the list of SCIM2 user schemas to which the new user should be linked.
    string[] schemas;
    # The name of the attribute that will be replaced.
    string userName;
    # The name of the attribute that will be replaced.
    BulkUserReplaceOb_data_name name;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:OAuth2ClientCredentialsGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type UserObResourceType_meta record {
    string location?;
    string resourceType?;
};

public type Bulk_body BulkUserCreateObject|BulkUserUpdateObject|BulkUserReplaceObject|BulkUserDeleteObject|BulkGroupCreateObject|BulkGroupUpdateObject|BulkGroupReplaceObject|BulkGroupDeleteObject;

public type BulkUserDeleteObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To delete multiple users, add an array of DELETE operations. You can include any number of operations in one bulk request.
    BulkUserDeleteOb[] Operations;
};

public type GroupSearchResponseObject record {
    int totalResults?;
    int startIndex?;
    int itemsPerPage?;
    string[] schemas?;
    groupOb[] Resources?;
};

# Represents the Queries record for the operation: getGroup by id
public type GetGroupByIdQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type BulkUserUpdateOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify the new user that is being updated. (Optional if <b>op</b> is <b>add</b> or <b>replace</b>)
    string path;
    # A unique identifier for the bulk operation. The bulkid is required for POST operations.
    int bulkId?;
    # Specify the details of the new user that should be updated.
    BulkUserUpdateOb_data data;
};

public type Enterprise\ User\ Extension record {
    Enterprise\ User\ Extension_manager manager?;
};

public type BulkUserReplaceObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To replace multiple users, add an array of PUT operations. You can include any number of operations in one bulk request.
    BulkUserReplaceOb[] Operations;
};

# Represents the Queries record for the operation: getUser
public type GetUserQueries record {
    # The expression used for filtering. Supported filters are ‘Ew’, ‘Eq’, ‘Co’, ‘Sw’, ‘Ne’ and ‘and’.
    string filter?;
    # The 1-based index of the first query result
    int:Signed32 startIndex?;
    # The name of the user store where filtering needs to be applied.
    string domain?;
    # Specifies the desired maximum number of query results per page.
    int:Signed32 count?;
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type UserObject_name record {
    # The `givenName` you specify will be entered for the First Name attribute in the user's profile.
    string givenName?;
    # The `familyName` you specify will be entered for the Last Name attribute in the user's profile.
    string familyName?;
};

# Represents the Queries record for the operation: createUser
public type CreateUserQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type BulkUserOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify that a new user is being added.
    string path;
    # A unique identifier for the bulk operation. The bulkid is required for POST operations.
    string bulkId;
    # Specify the details of the new user that should be added.
    BulkUserOb_data data;
};

# The name of the attribute that will be replaced.
public type BulkUserReplaceOb_data_name record {
    string givenName?;
    string familyName?;
};

public type UserUpdateObject record {
    string[] schemas?;
    UserResponseObject_name name?;
    string userName?;
    record {}[] emails?;
    Enterprise\ User\ Extension urn\:ietf\:params\:scim\:schemas\:extension\:enterprise\:2\.0\:User?;
};

public type PatchGroupOperationResponseObject record {
    string displayName?;
    GroupResponseObject_meta meta?;
    string[] schemas?;
    string id?;
    record {}[] members?;
};

public type Users_body UserObject|UserObjectPassInvite;

public type GroupResponseObject_meta record {
    string created?;
    string location?;
    string lastModified?;
    string resourceType?;
};

public type OperationMeItem_value record {
    string nickName?;
};

public type GroupSearchRequestObject record {
    string[] schemas;
    int startIndex?;
    string filter?;
};

public type UserResponseObject_name record {
    string givenName?;
    string familyName?;
};

public type Enterprise\ User\ Extension_manager record {
    string value?;
};

public type OperationMeItem record {
    "add"|"remove"|"replace" op?;
    OperationMeItem_value value?;
};

public type BulkUserUpdateObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To update multiple users, add an array of PATCH operations. You can include any number of operations in one bulk request.
    BulkUserUpdateOb[] Operations;
};

public type OperationObBulk OperationObBulk_inner[];

public type ResourceTypeResponse record {
    string[] schemas?;
    UserObResourceType[] resourceType?;
};

public type groupOb_roles record {
    string \$ref?;
    string display?;
    string value?;
};

public type GroupItemObj_value record {
    record {}[] members?;
};

public type BulkUserResponseObject record {
    string[] schemas?;
    OperationObBulk Operations?;
};

public type PatchOperationInput record {
    string[] schemas?;
    OperationMeItem[] Operations?;
};

public type UserObjectPassInvite_urnscimwso2schema record {
    # If this parameter is set to `true`, users will be allowed configure their own password. An email is sent to the specified email address, which will have instructions for the user to set the password and confirm the new user account.
    boolean askPassword?;
};

public type UserResponseObject_meta record {
    string created?;
    string location?;
    string lastModified?;
    string resourceType?;
};

public type GroupPutResponseObject record {
    string displayName?;
    GroupResponseObject_meta meta?;
    string[] schemas?;
    string id?;
    record {}[] members?;
};

public type PatchGroupOperationRequestObject record {
    string[] schemas;
    GroupItemObj[] Operations?;
};

public type BulkUserReplaceOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify the existing user that should be replaced by the new user information that is added.
    string path;
    # A unique identifier for the bulk operation. The bulkid is required for POST operations.
    int bulkId?;
    # Specify the new user details that should be used to replace the existing user specified in the path.
    BulkUserReplaceOb_data data;
};

public type BulkGroupCreateOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify that a new user group that should be added.
    string path;
    # A unique identifier for the bulk operation. The bulkid is required for POST operations.
    string bulkId?;
    # Specify the details of the new user group that should be added.
    BulkGroupCreateOb_data data;
};

public type BulkGroupCreateObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To add multiple new user groups, add an array of POST operations. You can include any number of operations in one bulk request.
    BulkGroupCreateOb[] Operations;
};

public type groupOb record {
    string displayName?;
    groupOb_meta meta?;
    groupOb_members[] members?;
    groupOb_roles[] roles?;
    string id?;
};

# Specify the new group details that should be used to replace the existing user group specified in the path.
public type BulkGroupReplaceOb_data record {
    # The display name of the user group.
    string displayName;
    # Array of member users.
    BulkGroupReplaceOb_data_members[] members;
};

# Represents the Queries record for the operation: patchUser
public type PatchUserQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

# Specify the details that should be updated for the user group specified in the path.
public type BulkGroupUpdateOb_data record {
    # The operation that should be applied to the existing user group.
    string op;
    # Specify “members” as the path.(Optional if <b>op</b> is <b>add</b> or <b>replace</b>)
    string path;
    # An array of users that belong to the group.(Optional if <b>op</b> is <b>remove</b>)
    BulkGroupUpdateOb_data_value[] value;
};

public type groupOb_meta record {
    string created?;
    string location?;
    string lastModified?;
};

public type GroupsListResponseObject record {
    int totalResults?;
    int startIndex?;
    int itemsPerPage?;
    string[] schemas?;
    groupOb[] Resources?;
};

public type UserObResourceType record {
    string schema?;
    string endpoint?;
    UserObResourceType_meta meta?;
    string name?;
    string description?;
    UserObResourceType_schemaExtensions schemaExtensions?;
    string id?;
};

public type GroupResponseObject record {
    string displayName?;
    GroupResponseObject_meta meta?;
    string[] schemas?;
    string id?;
    # The members of the group. Note that if the group is from a remote user store, a limited number of members will be returned. You can use filters to query remaining users. For example - `emails+eq+user@gmail.com+and+groups+eq+remote_group_01`
    groupOb_members[] members?;
    groupOb_roles[] roles?;
};

# Specify the details of the new user that should be added.
public type BulkUserOb_data record {
    # Specify the list of SCIM2 user schemas to which the new user should be linked.
    string[] schemas;
    # The email address that should be set as the username.
    string userName?;
    # The password that is set for the user.
    string password;
};

public type BulkGroupUpdateOb_data_value record {
    # The display name of the user, who is a member.(Required if <b>path</b> is set to <b>members</b>)
    string display?;
    # The user ID of the member user.(Required if <b>path</b> is set to <b>members</b>)
    string value?;
};

# Represents the Queries record for the operation: updateGroup
public type UpdateGroupQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type UserObject_urnscimwso2schema record {
    # When the administrator sets the password for the new user account, this parameter specifies if the new user should confirm the new account through email. If this parameter is set to `true`, an email is sent to the user's email address requesting confirmation.
    boolean verifyEmail?;
};

public type BulkUserCreateObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To add multiple new users, add an array of POST operations. You can include any number of operations in one bulk request.
    BulkUserOb[] Operations;
};

public type BulkGroupUpdateObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To update multiple user groups, add an array of PATCH operations. You can include any number of operations in one bulk request.
    BulkGroupUpdateOb[] Operations;
};

# Represents the Queries record for the operation: patchGroup
public type PatchGroupQueries record {
    # SCIM defined attributes parameter.
    string attributes?;
    # SCIM defined excludedAttribute parameter.
    string excludedAttributes?;
};

public type BulkGroupDeleteOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify the existing user group that should be deleted.
    string path;
};

public type UserObject record {
    string[] schemas?;
    UserObject_name name?;
    # Unique username of the user.
    string userName?;
    # Use this parameter to set a password for the user account.
    string password;
    # This email will be entered for the Email attribute in the user's profile.
    record {}[] emails?;
    Enterprise\ User\ Extension urn\:ietf\:params\:scim\:schemas\:extension\:enterprise\:2\.0\:User?;
    UserObject_urnscimwso2schema urn\:scim\:wso2\:schema?;
};

public type BulkGroupReplaceOb record {
    # The method that should be used in the operation
    string method;
    # Add this path to specify the existing user group that should be replaced by the new information that is added.
    string path;
    # A unique identifier for the bulk operation. The bulkid is required for POST operations.
    int bulkId?;
    # Specify the new group details that should be used to replace the existing user group specified in the path.
    BulkGroupReplaceOb_data data;
};

public type BulkGroupReplaceOb_data_members record {
    # The display name of a user assigned to the group.
    string display;
    # The ID of the user.
    string value;
};

public type GroupPutRequestObject record {
    string displayName?;
    record {}[] members?;
};

public type BulkGroupReplaceObject record {
    # The number of errors that will be accepted by the vendor before returning the response.
    int failOnErrors?;
    # This is the schema that is required for sending bulk requests
    string[] schemas;
    # Array of operations. To replace multiple user groups, add an array of PUT operations. You can include any number of operations in one bulk request.
    BulkGroupReplaceOb[] Operations;
};

public type UserObjectListResponseObject record {
    int totalResults?;
    int startIndex?;
    int itemsPerPage?;
    string[] schemas?;
    UserResponseObject[] Resources?;
};

public type UserObResourceType_schemaExtensions record {
    string schema?;
    boolean required?;
};
