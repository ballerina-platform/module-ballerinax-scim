// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

# This client specifies the **SCIM 2.0 RESTful APIs** for user, group, bulk operations, service provider configuration, and resource type management.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Filter Users
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid users are found / Valid users are not found 
    resource isolated function get Users(map<string|string[]> headers = {}, *GetUserQueries queries) returns UserObjectListResponseObject|error {
        string resourcePath = string `/Users`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create User
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - User is created. 
    resource isolated function post Users(Users_body payload, map<string|string[]> headers = {}, *CreateUserQueries queries) returns UserResponseObject|error {
        string resourcePath = string `/Users`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Search Users
    #
    # + headers - Headers to be sent with the request 
    # + return - Valid users are found / Valid users are not found 
    resource isolated function post Users/\.search(UserSearchRequestObject payload, map<string|string[]> headers = {}) returns UserObjectListResponseObject|error {
        string resourcePath = string `/Users/.search`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get User by ID
    #
    # + id - Unique ID of the resource type.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid user is found 
    resource isolated function get Users/[string id](map<string|string[]> headers = {}, *GetUserByIdQueries queries) returns UserResponseObject|error {
        string resourcePath = string `/Users/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update User - PUT
    #
    # + id - Unique ID of the resource type.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid user is found 
    resource isolated function put Users/[string id](UserUpdateObject payload, map<string|string[]> headers = {}, *UpdateUserQueries queries) returns UserResponseObject|error {
        string resourcePath = string `/Users/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete User by ID
    #
    # + id - Unique ID of the user that you want to delete.
    # + headers - Headers to be sent with the request 
    # + return - User is deleted 
    resource isolated function delete Users/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Users/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Update User - PATCH
    #
    # + id - Unique id of the resource type.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid user is found 
    resource isolated function patch Users/[string id](PatchOperationInput payload, map<string|string[]> headers = {}, *PatchUserQueries queries) returns UserResponseObject|error {
        string resourcePath = string `/Users/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Filter Groups
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid groups are found / No Group found 
    resource isolated function get Groups(map<string|string[]> headers = {}, *GetGroupQueries queries) returns GroupsListResponseObject|error {
        string resourcePath = string `/Groups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create Group
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid group is created 
    resource isolated function post Groups(GroupRequestObject payload, map<string|string[]> headers = {}, *CreateGroupQueries queries) returns GroupResponseObject|error {
        string resourcePath = string `/Groups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Search Groups
    #
    # + headers - Headers to be sent with the request 
    # + return - Valid groups are found / Valid groups are not found 
    resource isolated function post Groups/\.search(GroupSearchRequestObject payload, map<string|string[]> headers = {}) returns GroupSearchResponseObject|error {
        string resourcePath = string `/Groups/.search`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get Group by ID
    #
    # + id - Unique ID of the resource type.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Valid group is found 
    resource isolated function get Groups/[string id](map<string|string[]> headers = {}, *GetGroupByIdQueries queries) returns GroupResponseObject|error {
        string resourcePath = string `/Groups/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update Group - PUT
    #
    # + id - Unique ID of the resource type.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Group is updated 
    resource isolated function put Groups/[string id](GroupPutRequestObject payload, map<string|string[]> headers = {}, *UpdateGroupQueries queries) returns GroupPutResponseObject|error {
        string resourcePath = string `/Groups/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete Group
    #
    # + id - Unique ID of the resource type.
    # + headers - Headers to be sent with the request 
    # + return - Group is deleted 
    resource isolated function delete Groups/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Groups/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Update Group - PATCH
    #
    # + id - Unique id of the resource type.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Group is updated 
    resource isolated function patch Groups/[string id](PatchGroupOperationRequestObject payload, map<string|string[]> headers = {}, *PatchGroupQueries queries) returns PatchGroupOperationResponseObject|error {
        string resourcePath = string `/Groups/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Create/Update/Replace/Delete SCIM Resources (Users/ Groups) in Bulk
    #
    # + headers - Headers to be sent with the request 
    # + return - Valid user is created 
    resource isolated function post Bulk(Bulk_body payload, map<string|string[]> headers = {}) returns BulkUserResponseObject|error {
        string resourcePath = string `/Bulk`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/scim+json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get Service Provider Config
    #
    # + headers - Headers to be sent with the request 
    # + return - Schema is found 
    resource isolated function get ServiceProviderConfig(map<string|string[]> headers = {}) returns SPConfigResponse|error {
        string resourcePath = string `/ServiceProviderConfig`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Resource Types
    #
    # + headers - Headers to be sent with the request 
    # + return - Schema is found 
    resource isolated function get ResourceTypes(map<string|string[]> headers = {}) returns ResourceTypeResponse|error {
        string resourcePath = string `/ResourceTypes`;
        return self.clientEp->get(resourcePath, headers);
    }
}
